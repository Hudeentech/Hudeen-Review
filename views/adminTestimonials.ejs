<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manage Testimonials</title>
    <link rel="stylesheet" href="/css/style.css">
</head>
<body>
    <div class="container">
        <h1 style="text-align: left;">Manage Testimonials</h1>
        <p style="text-align: left; color: var(--text-secondary);">Review, approve, or delete submitted testimonials.</p>
        <hr>

        <div style="display: flex; flex-direction: row; justify-content: start; align-items: start;"  class="admin-links">
            <a style="background: gold;color: #333;"  href="/admin/dashboard" class="btn-primary">Dashboard</a>
            <a style="background: gold;color: #333;"  href="/admin/testimonials" class="btn-primary">View All Testimonials</a>
        </div>

        <% if (testimonials.length === 0) { %>
            <p style="text-align: center; font-style: italic; margin-top: 30px; color: var(--text-secondary);">No testimonials found yet. Generate a link from the dashboard to get started!</p>
        <% } else { %>
            <div class="admin-testimonial-list">
                <% testimonials.forEach(testimonial => { %>
                    <div class="admin-testimonial-item" id="testimonial-<%= testimonial.id %>">
                        <div class="header-info">
                            <img src="<%= testimonial.pictureUrl %>" alt="<%= testimonial.name %>" onerror="this.onerror=null;this.src='https://placehold.co/60x60/3d3d3d/a3a3a3?text=No+Img';">
                            <div class="details">
                                <h4><%= testimonial.name %></h4>
                                <p><%= testimonial.role %> at <%= testimonial.company %></p>
                                <span class="status <%= testimonial.status %>"><%= testimonial.status.toUpperCase() %></span>
                            </div>
                        </div>
                        <p class="message-preview">"<%= testimonial.message %>"</p>
                        <p style="font-size: 0.85rem; color: var(--text-secondary); margin-top: 5px;">Submitted on: <%= new Date(testimonial.submissionDate._seconds * 1000).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' }) %></p>

                        <div class="admin-testimonial-actions">
                            <% if (testimonial.status === 'pending') { %>
                                <button style="background: rgb(0, 255, 145);" class="approve-btn" onclick="updateTestimonialStatus('<%= testimonial.id %>', 'approved', this)">Approve</button>
                            <% } %>
                            <% if (testimonial.status !== 'deleted') { %>
                                <button style="background: rgb(255, 75, 75);" class="delete-btn" onclick="updateTestimonialStatus('<%= testimonial.id %>', 'deleted', this)">Delete</button>
                            <% } %>
                        </div>
                    </div>
                <% }); %>
            </div>
        <% } %>
        <div id="toast" class="toast-message"></div>

    </div>

    <script>
        async function updateTestimonialStatus(id, status, buttonElement) {
            const confirmationMessage = `Are you sure you want to ${status} this testimonial?`;
            const confirmAction = confirm(confirmationMessage);
            if (!confirmAction) {
                return;
            }

            const currentItem = document.getElementById(`testimonial-${id}`);
            const statusSpan = currentItem.querySelector('.status');
            const actionsDiv = currentItem.querySelector('.admin-testimonial-actions');

            try {
                let endpoint = '';
                let method = '';

                if (status === 'approved') {
                    endpoint = `/api/testimonials/${id}/approve`;
                    method = 'PATCH';
                } else if (status === 'deleted') {
                    endpoint = `/api/testimonials/${id}/delete`;
                    method = 'DELETE';
                } else {
                    showToast('Invalid status action.', true);
                    return;
                }

                const response = await fetch(endpoint, {
                    method: method,
                    headers: { 'Content-Type': 'application/json' }
                });

                const result = await response.json();

                if (response.ok) {
                    showToast(result.message);
                    statusSpan.textContent = status.toUpperCase();
                    statusSpan.className = `status ${status}`;

                    actionsDiv.innerHTML = '';
                    if (status === 'pending') { /* Should not happen if approved or deleted */ }
                    if (status !== 'approved' && status !== 'deleted') {
                        actionsDiv.innerHTML += `<button class="approve-btn" onclick="updateTestimonialStatus('${id}', 'approved', this)">Approve</button>`;
                    }
                    if (status !== 'deleted') {
                        actionsDiv.innerHTML += `<button class="delete-btn" onclick="updateTestimonialStatus('${id}', 'deleted', this)">Delete</button>`;
                    }
                    if (status === 'approved') {
                        actionsDiv.innerHTML += `<button class="delete-btn" onclick="updateTestimonialStatus('${id}', 'deleted', this)">Delete</button>`;
                    }
                } else {
                    showToast(result.error || 'Failed to update status. Please try again.', true);
                }
            } catch (error) {
                console.error('Error updating testimonial status:', error);
                showToast('Network error or server unavailable.', true);
            }
        }

        function showToast(message, isError = false) {
            const toast = document.getElementById('toast');
            toast.textContent = message;
            toast.className = 'toast-message show';
            if (isError) {
                toast.style.backgroundColor = 'rgba(239, 68, 68, 0.9)';
                toast.style.color = 'white';
            } else {
                toast.style.backgroundColor = 'rgba(34, 197, 94, 0.9)';
                toast.style.color = 'white';
            }
            toast.style.border = 'none';

            setTimeout(() => {
                toast.className = toast.className.replace('show', '');
            }, 3000);
        }
    </script>
</body>
</html>
