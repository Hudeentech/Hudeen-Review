<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <link rel="shortcut icon" href="/favicon.ico" type="image/x-icon">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard</title>
    <link rel="stylesheet" href="/css/style.css">
</head>
<body>
    <div class="container" style="max-width: 500px;  background: linear-gradient(80deg, gold, orange); background-clip: text;">
        <h1 style="text-transform: capitalize; color: transparent; line-height: 1.3em; font-weight:500;">Admin Dashboard</h1>
        <p style="text-align: left; color: white; line-height: 1.3em; font-weight: 400; text-transform: capitalize; ">Manage testimonials and generate submission links.</p>

        <div style="display: flex; flex-direction: row; justify-content: start; align-items: start;" class="admin-links">
            <a  style="background: gold;color: #333; text-transform: capitalize;" href="/admin/dashboard" class="btn-primary">Dashboard</a>
            <a style="background: gold;color: #333; text-transform: capitalize;"  href="/admin/testimonials" class="btn-primary">Testimonials</a>
        </div>

        <h4 style="font-size: 1.3em; color: white;">Overview Statistics</h4>
        <div class="admin-dashboard-stats">
            <div class="stat-card">
                <h4>Total Testimonials</h4>
                <div class="count"><%= totalCount %></div>
            </div>
            <div class="stat-card">
                <h4>Pending for Review</h4>
                <div class="count"><%= pendingCount %></div>
            </div>
            <div class="stat-card">
                <h4>Approved Testimonials</h4>
                <div class="count"><%= approvedCount %></div>
            </div>
            <div class="stat-card">
                <h4>Archived Testimonials</h4>
                <div class="count"><%= deletedCount %></div>
            </div>
        </div>

        <% if (pendingTestimonials.length > 0) { %>
            <div class="notification-section">
                <h3>ðŸ”” Urgent: New Testimonials Awaiting Approval!</h3>
                <p>You have **<%= pendingCount %>** testimonial(s) that need your attention.</p>
                <ul>
                    <% pendingTestimonials.forEach(t => { %>
                        <li><strong><%= t.name %></strong> <%= t.company !== 'N/A' ? 'from ' + t.company : '' %>: "<%= t.message.substring(0, 70) %>..."</li>
                    <% }); %>
                </ul>
                <a href="/admin/testimonials" class="btn-primary" style="background: gold; border-radius: 500pxpx; font-weight: 300; text-transform: capitalize; color: var(--text-dark);">Review Pending Now</a>
            </div>
        <% } else { %>
            <div class="notification-section" style="background-color: rgba(34, 197, 94, 0.08); border-color: rgb(73, 73, 73);">
                <p>âœ… All caught up! No new testimonials pending review at the moment.</p>
            </div>
        <% } %>

        <div style="background: linear-gradient(60deg, gold, orange); background-clip: text;" class="generate-link-section">
            <h2 style="color: transparent; font-weight: 500; line-height: 1.3em;">Generate New Testimonial Link</h2>
            <p style="color: var(--text-secondary); margin-bottom: 1.5rem;">Create a unique, one-time link for users to submit testimonials. This link expires after 24 hours.</p>
            <button style="border-radius:500px ; background:linear-gradient(80deg, gold , orange); text-transform: capitalize; font-weight: 300; font-size: .8em;" id="generateLinkBtn">Create New Submission Link</button>
            <div id="generatedLinkDisplay" class="generated-link" style="display:none;">
                <span id="linkText"></span>
                <button id="copyLinkBtn" style="border-radius:500px ; background: white; text-transform: capitalize; font-weight: 300; font-size: 1em;" class="copy-btn">Copy Link</button>
            </div>
        </div>
        <div id="toast" class="toast-message"></div>

    </div>

    <script>
        document.getElementById('generateLinkBtn').addEventListener('click', async () => {
            const generateLinkBtn = document.getElementById('generateLinkBtn');
            const linkDisplay = document.getElementById('generatedLinkDisplay');
            const linkTextSpan = document.getElementById('linkText');
            const copyButton = document.getElementById('copyLinkBtn');

            generateLinkBtn.disabled = true;
            linkTextSpan.textContent = 'Generating link...';
            linkDisplay.style.display = 'flex'; // Show loading state

            try {
                const response = await fetch('/admin/generate-link', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                });
                const result = await response.json();

                if (response.ok) {
                    linkTextSpan.textContent = result.link;
                    linkDisplay.style.display = 'flex'; // Ensure flex for alignment
                    showToast('Link generated successfully!');
                } else {
                    linkTextSpan.textContent = 'Error: ' + (result.error || 'Failed to generate link.');
                    linkDisplay.className = 'generated-link message error'; // Apply error styling
                    showToast('Failed to generate link.', true);
                }
            } catch (error) {
                console.error('Error:', error);
                linkTextSpan.textContent = 'Network error or server unavailable.';
                linkDisplay.className = 'generated-link message error'; // Apply error styling
                showToast('Network error.', true);
            } finally {
                generateLinkBtn.disabled = false;
            }
        });

        document.getElementById('copyLinkBtn').addEventListener('click', () => {
            const linkText = document.getElementById('linkText').textContent;
            const tempInput = document.createElement('textarea');
            tempInput.value = linkText;
            document.body.appendChild(tempInput);
            tempInput.select();
            document.execCommand('copy');
            document.body.removeChild(tempInput);
            showToast('Link copied to clipboard!');
        });

        function showToast(message, isError = false) {
            const toast = document.getElementById('toast');
            toast.textContent = message;
            toast.className = 'toast-message show';
            if (isError) {
                toast.style.backgroundColor = 'var(--accent-red)';
                toast.style.borderColor = 'var(--accent-red)';
            } else {
                toast.style.backgroundColor = 'var(--accent-green)'; /* Green for success */
                toast.style.borderColor = 'var(--accent-green)';
            }
            // Toast background for default is card-background, but messages have special bg.
            // For toast, let's stick to a solid color.
            toast.style.backgroundColor = isError ? 'rgba(239, 68, 68, 0.9)' : 'rgba(34, 197, 94, 0.9)';
            toast.style.color = 'white';
            toast.style.border = 'none';

            setTimeout(() => {
                toast.className = toast.className.replace('show', '');
            }, 3000);
        }
    </script>
</body>
</html>
